import React, { useState, useRef, useEffect } from 'react';
import {MapContainer as Map, Marker, TileLayer,useMapEvents,MapConsumer} from 'react-leaflet';
import Fullscreen from './Fullscreen'
import LeafletControl from './LeafletControl'
import icon from './Icon'
import DayJSUtils from '@date-io/dayjs';
import {withStyles} from 'portal/components/styles';
import {DateTimePicker,DatePicker,MuiPickersUtilsProvider} from '@material-ui/pickers'
import Image from '../Image'
import CustomButton from '../Button'
import {useNotif} from '../Notification'
import Backdrop from '../Backdrop'
import SimpleMDE from '../SimpleMDE'
import {isEmptyObj} from '@portalnesia/utils'
import useAPI from 'portal/utils/api'
import {useMousetrap,useBeforeUnload} from 'portal/utils/useKeys'
import Link from 'next/link'
import {Grid,Typography,TextField,Button,Divider,Switch,FormGroup,FormControlLabel,Tooltip,IconButton} from '@mui/material'
import CancelIcon from '@mui/icons-material/Cancel';

const styles=theme=>({
    tooltip:{
        fontSize:16
    }
})

function MapEventComponents({onadd}) {
    const map = useMapEvents({
        click:onadd
    })
    return null;
}

const MapSelectContainer=({classes,data,id,ticket})=>{
    const dayjs = require('dayjs')
    const pointMarker=icon({
        icon:'calendar-alt',
        markerColor:'darkred'
    })
    const [inputValue,setInputValue]=useState(data?.events ? data?.events : {});
    const [date,setDate]=useState({from_date:dayjs(data?.events?.from_date ? data?.events?.from_date : ''),to_date:(data?.events?.to_date ? dayjs(data?.events?.to_date) : dayjs().add(7,'day')),ticket_from:dayjs(data?.events?.ticket_from ? data?.events?.ticket_from : ''),ticket_to:(data?.events?.ticket_to ? dayjs(data?.events?.ticket_to) : dayjs().add(7,'day'))});
    const {setNotif}=useNotif()
    const [loading,setLoading]=useState(false);
    const [file,setFile]=useState(null);
    const [dataFile,setDataFile]=useState(null);
    const [backdrop,setBackdrop]=useState(false)
    const [progress,setProgress]=useState(0);
    const inputEl=useRef(null);
    const popover=useRef(null)
    const {post} = useAPI()
    const [canChange,setCanChange]=React.useState(true)
    useBeforeUnload(canChange,`/events/edit/${id}`)
    useMousetrap(['ctrl+s','meta+s'],(e)=>{
        if(e.preventDefault) e.preventDefault()
        e.returnValue=false
        handleSubmit(e)
    },true)
    useMousetrap(['+','shift+='],(e)=>{
        if(e.preventDefault) e.preventDefault()
        e.returnValue=false
        router.push('/events/new');
    },false)

    const center=data?.events?.coordinate ? data?.events?.coordinate : [-7.942557,112.623790];
    const zoom=data?.events?.coordinate ? 16 : 10;

    const handleInputChange=(name,value)=>{
        setCanChange(false)
        setInputValue({
            ...inputValue,
            [name]:value
        });
    }

    const handleDateChange=(name,value)=>{
        setCanChange(false)
        let val;
        if(name==='from_date' || name==='to_date') {
            val=dayjs(value).format('YYYY-MM-DD HH:mm:ss');
        } else {
            val=dayjs(value).format('YYYY-MM-DD');
        }
        setInputValue({
            ...inputValue,
            [name]:val
        });

        setDate({
            ...date,
            [name]:value
        });
    }

    const onadd=(e)=>{
        if(!loading) {
            setCanChange(false)
            setInputValue({
                ...inputValue,
                coordinate:[e.latlng.lat,e.latlng.lng]
            })
        }
    }

    const onchange=(e)=>{
        if(!loading){
            setCanChange(false)
            setInputValue({
                ...inputValue,
                coordinate:[e.target._latlng.lat,e.target._latlng.lng]
            })
        }
    }

    const onremove=()=>{
        if(!loading){
            setCanChange(false)
            setInputValue({
                ...inputValue,
                coordinate:null
            })
        }   
    }

    const inputClick=()=>{
        inputEl.current?.click();
    }
    const inputChange=(e)=>{
        const gambar=e.target?.files[0];
        if(gambar?.type.toLowerCase() != 'image/jpeg' &&  gambar?.type.toLowerCase() != 'image/png' && gambar?.type.toLowerCase() != 'image/jpg'){
            setNotif("File not supported, only jpg, jpeg, png",true)
        } else {
            setFile(gambar);
            const reader = new FileReader();
            reader.onload = (function() {
                return function(e) {
                    setDataFile(e.target.result);
                };
            })(gambar);
            reader.readAsDataURL(gambar);
        }
    }
    const inputRemove=()=>{
        setFile(null);
        setDataFile(null);
    }

    const uploadRemove=()=>{
        setBackdrop(true);
        post(`${process.env.API}/events/edit/${id}/remove_images`,null)
        .then((res)=>{
            if(!res.error) {
                setInputValue({
                    ...inputValue,
                    image:false
                });
            }
            setBackdrop(false);
            setNotif(res.msg,Boolean(res.error))
        }).catch(()=>{
            setBackdrop(false);
            setNotif("Something went wrong",true)
        })
    }

    const uploadImage=()=>{
        if(file===null) setNotif("Please select image first",true);
        else {
            setProgress(0)
            setBackdrop(true);
            const form=new FormData();
            form.append('file',file);
            const opt={
                headers:{
                    'Content-Type':'multipart/form-data'
                },
                onUploadProgress:(progEvent)=>{
                    const complete=Math.round((progEvent.loaded * 100) / progEvent.total);
                    setProgress(complete);
                }
            }
            post(`${process.env.API}/events/edit/${id}/upload`,form,opt)
            .then((res)=>{
                if(!res.error) {
                    setInputValue({
                        ...inputValue,
                        image:`${process.env.CONTENT_URL}/img?source=events&image=${res.path}`
                    });
                    setFile(null);
                    setDataFile(null);
                }
                setBackdrop(false);
                setNotif(res.msg,Boolean(res.error))
                setProgress(0)
            }).catch(()=>{
                setBackdrop(false);
                setNotif("Something went wrong",true)
                setProgress(0)
            })
        }
    }

    const handleSubmit=(event)=>{
        if(event.preventDefault) event.preventDefault();
        setLoading(true);
        /*
        if(dayjs(date.to_date).isBefore(dayjs(date.from_date)) || dayjs(date.from_date).isBefore(dayjs()) || dayjs(date.to_date).isBefore(dayjs())) {
            setNotif("Date error",true);
            setLoading(false)
        } 
        */
        if(dayjs(date.to_date).isBefore(dayjs(date.from_date))) {
            setNotif("Date error",true);
            setLoading(false)
        } else if(inputValue.ticket_public===true && (dayjs(date.ticket_from).isAfter(dayjs(date.to_date)) || dayjs(date.ticket_to).isBefore(dayjs(date.ticket_from)) || dayjs(date.ticket_to).isAfter(dayjs(date.to_date)))) {
            setNotif("Date error",true);
            setLoading(false) 
        } else {
            const inputtt={
                ...inputValue,
                users:null,
                coordinate:`${inputValue.coordinate[0]},${inputValue.coordinate[1]}`
            }
            delete inputtt.users;
            post(`${process.env.API}/events/edit/${id}`,inputtt)
            .then((res)=>{
                setNotif(res.msg,Boolean(res.error))
                setLoading(false);
                if(!res.error) setCanChange(true)
            }).catch(()=>{
                setNotif("Something went wrong",true);
                setLoading(false);
            })
            //setLoading(false)
        }
    }
    
    if(!isEmptyObj(inputValue)) {
        return (
            <MuiPickersUtilsProvider utils={DayJSUtils}>
                <form onSubmit={(evt)=>handleSubmit(evt)}>
                    <Backdrop open={backdrop} {...(progress!==0 ? {progress:progress} : {})} />
                    <Grid container spacing={4}>
                        <Grid item xs={12} lg={4}>
                            {inputValue.image ? (
                                <div>
                                    <Typography variant="h6">Events Image</Typography>
                                    <div style={{position:'relative'}}>
                                        <IconButton
                                            style={{position:'absolute',top:5,right:5}}
                                            onClick={uploadRemove}
                                            size="large">
                                            <CancelIcon fontSize='large' style={{color:'red'}} />
                                        </IconButton>
                                        <Image blured src={`${inputValue.image}&size=400&watermark=no`} style={{width:'100%'}} />
                                    </div>
                                </div>
                            ) : (
                                <div>
                                    <Typography variant="h6">Events Image</Typography>

                                    {dataFile !==null && (
                                        <div style={{position:'relative'}}>
                                            <IconButton
                                                style={{position:'absolute',top:5,right:5}}
                                                onClick={inputRemove}
                                                size="large">
                                                <CancelIcon fontSize='large' style={{color:'red'}} />
                                            </IconButton>
                                            <Image blured src={dataFile} style={{width:'100%'}} />
                                        </div>
                                    )}
                                    <input ref={inputEl} type='file' accept="image/*" style={{display:'none'}} onChange={inputChange} />
                                    <div style={{display:'flex',justifyContent:'space-between'}}>
                                        <Button onClick={inputClick} variant='outlined'>Select image</Button>
                                        <Button onClick={uploadImage} variant='outlined'>Upload</Button>
                                    </div>
                                </div>
                                
                            )}

                        </Grid>
                        <Grid item xs={12} lg={8}>
                            <Grid container spacing={2}>
                                <Grid item xs={12}>
                                    <FormGroup>
                                        <FormControlLabel control={
                                            <Switch disabled={loading} checked={inputValue.publish} onChange={event=>handleInputChange('publish',event.target.checked)} color="primary" />
                                        }
                                        label="Publish" />
                                    </FormGroup>
                                </Grid>
                                <Grid item xs={12}>
                                    <TextField disabled={loading} variant='outlined' name='name' label="Events Name" value={inputValue.name} fullWidth onChange={event=>handleInputChange('name',event.target.value)} required />
                                </Grid>
                                <Grid item xs={12}>
                                    <Typography variant="h6">Events Description</Typography>
                                    <SimpleMDE
                                        id="markdown-editor"
                                        onChange={(text)=>handleInputChange('description',text)}
                                        value={inputValue.description}
                                        name='description'
                                    />
                                </Grid>
                                <Grid item xs={12}>
                                    <TextField variant='outlined' label="Venue" value={inputValue.venue} fullWidth onChange={event=>handleInputChange('venue',event.target.value)} required />
                                    <div style={{marginTop:10}}>
                                        <Map key='map-select' style={{height:400,width:'100%'}} onclick={onadd} zoom={zoom} center={center}>
                                            <MapEventComponents onadd={onadd} />
                                            <Fullscreen />
                                            <LeafletControl flyTo={true} position='topleft' strings={{title:'Where am i?',popup:'You are within {distance} {unit} from this point'}}/>
                                            
                                            <TileLayer 
                                            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                                            attribution="&copy; <a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://osm.org/copyright&quot;>OpenStreetMap</a> contributors | &copy; <a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https://portalnesia.com&quot;>Portalnesia</a>"
                                            />

                                            {inputValue.coordinate !== null && (
                                                <Marker
                                                    key={0}
                                                    marker_index={0}
                                                    position={inputValue.coordinate}
                                                    draggable={true}
                                                    eventHandlers={{
                                                        click:onremove,
                                                        dragend:onchange
                                                    }}
                                                    icon={pointMarker}
                                                />
                                            )} 
                                        </Map>
                                        <Typography variant="body2">*Click map to add marker or change marker's position<br />*Drag marker to change marker's position<br />*Click marker to remove it</Typography>
                                    </div>
                                </Grid>
                                <Grid item xs={12}>
                                    <Typography variant="h6" gutterBottom>Date & Time</Typography>
                                    <Grid container spacing={2}>
                                        <Grid item xs={6}>
                                            <DateTimePicker
                                                maxDate={date.to_date}
                                                //disablePast
                                                fullWidth
                                                id="date-picker-from"
                                                label="From"
                                                format="DD MMMM YYYY HH:mm"
                                                value={date.from_date}
                                                onChange={date=>handleDateChange('from_date',date)}
                                                required
                                                strictCompareDates
                                                ampm={false}
                                                name='from_date'
                                                inputVariant='outlined'
                                                disabled={loading}
                                            />
                                        </Grid>
                                        <Grid item xs={6}>
                                            <DateTimePicker
                                                minDate={date.from_date}
                                                //disablePast
                                                fullWidth
                                                id="date-picker-to"
                                                label="To"
                                                format="DD MMMM YYYY HH:mm"
                                                value={date.to_date}
                                                onChange={date=>handleDateChange('to_date',date)}
                                                required
                                                strictCompareDates
                                                ampm={false}
                                                name='to_date'
                                                inputVariant='outlined'
                                                disabled={loading}
                                            />
                                        </Grid>
                                    </Grid>
                                </Grid>
                                <Grid item xs={12}>
                                    <FormGroup>
                                        <FormControlLabel control={
                                            <Switch disabled={loading} checked={inputValue.ticket} onChange={event=>handleInputChange('ticket',event.target.checked)} color="primary" />
                                        }
                                        label="Ticket" />
                                    </FormGroup>
                                </Grid>
                                {inputValue.ticket === true && (
                                    <Grid item xs={12}>
                                        <FormGroup>
                                            <FormControlLabel style={{marginBottom:'1em'}} control={
                                                <Switch disabled={loading} checked={inputValue.ticket_public} onChange={event=>handleInputChange('ticket_public',event.target.checked)} color="primary" />
                                            }
                                            label={
                                                <Tooltip enterTouchDelay={100} title='If checked, everyone who has your registration link can register to your events' interactive classes={{tooltip:classes.tooltip}}>
                                                    <Typography component='p'>Public Ticket Registration</Typography>
                                                </Tooltip>
                                            } />
                                        </FormGroup>
                                        {inputValue.ticket_public === true && (
                                            <Grid container spacing={2}>
                                                <Grid item xs={6}>
                                                            <DatePicker
                                                                maxDate={date.to_date}
                                                                //disablePast
                                                                fullWidth
                                                                id="date-picker-from-ticket"
                                                                label='Start Tickets'
                                                                required
                                                                format="DD MMMM YYYY"
                                                                value={date.ticket_from}
                                                                onChange={date=>handleDateChange('ticket_from',date)}
                                                                strictCompareDates
                                                                ampm={false}
                                                                name='ticket_from'
                                                                inputVariant='outlined'
                                                                disabled={loading}
                                                                animateYearScrolling
                                                                PopperProps={{
                                                                    container:popover?.current
                                                                }}
                                                            />
                                                </Grid>
                                                <Grid item xs={6}>
                                                            <DatePicker
                                                                minDate={date.ticket_from}
                                                                maxDate={date.to_date}
                                                                //disablePast
                                                                fullWidth
                                                                id="date-picker-to-ticket"
                                                                label='End Tickets'
                                                                required
                                                                format="DD MMMM YYYY"
                                                                value={date.ticket_to}
                                                                onChange={date=>handleDateChange('ticket_to',date)}
                                                                strictCompareDates
                                                                ampm={false}
                                                                name='ticket_to'
                                                                inputVariant='outlined'
                                                                disabled={loading}
                                                                animateYearScrolling
                                                                PopperProps={{
                                                                    container:popover?.current
                                                                }}
                                                            />
                                                </Grid>
                                            </Grid>
                                        )}
                                    </Grid>
                                )}
                            </Grid>
                        </Grid>
                        <Grid item xs={12}>
                            <Divider style={{marginBottom:20,marginTop:30}} />
                            <div className='flex-header'>
                                {ticket && <Link href='/events/tickets/[id]' as={`/events/tickets/${id}`} passHref><Button variant='contained' color='secondary' component='a'>Tickets</Button></Link>}
                                <CustomButton tooltip='Ctrl + S' type='submit' disabled={loading} isloading={loading}>Save</CustomButton>
                            </div>
                        </Grid>
                    </Grid>
                    <div ref={popover}></div>
                </form>
            </MuiPickersUtilsProvider>
        );
    } else return null
}

export default withStyles(styles)(MapSelectContainer);